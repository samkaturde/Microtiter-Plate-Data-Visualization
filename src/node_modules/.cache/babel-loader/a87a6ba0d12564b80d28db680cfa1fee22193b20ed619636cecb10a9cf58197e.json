{"ast":null,"code":"var _jsxFileName = \"/Users/sam-mac/Documents/project/microtiter-plate-visualization/src/components/Heatmap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport HeatMap from 'react-heatmap-grid';\nimport { Tooltip } from 'react-tooltip';\nimport { DataContext } from '../contexts/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Heatmap = () => {\n  _s();\n  const {\n    data\n  } = useContext(DataContext);\n  const [metric, setMetric] = useState(null);\n  if (!data || data.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 42\n  }, this);\n  const metrics = Object.keys(data[0]).filter(key => key !== 'well');\n  const handleMetricChange = event => {\n    setMetric(event.target.value);\n  };\n  const wellData = data.reduce((acc, row) => {\n    acc[row.well] = row;\n    return acc;\n  }, {});\n  const getHeatMapData = () => {\n    const rows = 32;\n    const cols = 48;\n    let heatmapData = Array.from({\n      length: rows\n    }, () => Array(cols).fill(0));\n    data.forEach(row => {\n      const [rowIdx, colIdx] = row.well.split(':').map(Number);\n      heatmapData[rowIdx - 1][colIdx - 1] = metric ? parseFloat(row[metric]) : 0;\n    });\n    return heatmapData;\n  };\n  const getColor = value => {\n    if (value > 75) return 'red';\n    if (value > 50) return 'orange';\n    if (value > 25) return 'yellow';\n    return 'green';\n  };\n  const tooltipContent = (x, y) => {\n    const well = `${y + 1}:${x + 1}`;\n    const wellInfo = wellData[well];\n    if (!wellInfo) {\n      return `<div>No data available</div>`;\n    }\n    return `<div>\n        <p><strong>Well: </strong>${well}</p>\n        ${metrics.map(m => `<p><strong>${m}: </strong>${wellInfo[m]}</p>`).join('')}\n      </div>`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleMetricChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a metric\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), metrics.map(m => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: m,\n        children: m\n      }, m, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(HeatMap, {\n        xLabels: new Array(48).fill('').map((_, i) => `${i + 1}`),\n        yLabels: new Array(32).fill('').map((_, i) => `${i + 1}`),\n        data: getHeatMapData(),\n        cellStyle: (background, value, min, max, data, x, y) => ({\n          background: getColor(value),\n          border: '1px solid #ccc',\n          cursor: 'pointer'\n        }),\n        cellRender: (value, x, y) => /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-tooltip-id\": `tooltip-${x}-${y}`,\n          \"data-tooltip-html\": tooltipContent(x, y),\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), data.map((row, index) => {\n      const [x, y] = row.well.split(':').map(Number);\n      return /*#__PURE__*/_jsxDEV(Tooltip, {\n        id: `tooltip-${x - 1}-${y - 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Heatmap, \"LnqsfqFdTfbvVdmgzXu5ncGxIVw=\");\n_c = Heatmap;\nexport default Heatmap;\nvar _c;\n$RefreshReg$(_c, \"Heatmap\");","map":{"version":3,"names":["React","useState","useContext","HeatMap","Tooltip","DataContext","jsxDEV","_jsxDEV","Heatmap","_s","data","metric","setMetric","length","children","fileName","_jsxFileName","lineNumber","columnNumber","metrics","Object","keys","filter","key","handleMetricChange","event","target","value","wellData","reduce","acc","row","well","getHeatMapData","rows","cols","heatmapData","Array","from","fill","forEach","rowIdx","colIdx","split","map","Number","parseFloat","getColor","tooltipContent","x","y","wellInfo","m","join","onChange","style","display","justifyContent","xLabels","_","i","yLabels","cellStyle","background","min","max","border","cursor","cellRender","index","id","_c","$RefreshReg$"],"sources":["/Users/sam-mac/Documents/project/microtiter-plate-visualization/src/components/Heatmap.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport HeatMap from 'react-heatmap-grid';\nimport { Tooltip } from 'react-tooltip';\nimport { DataContext } from '../contexts/DataContext';\n\nconst Heatmap = () => {\n  const { data } = useContext(DataContext);\n  const [metric, setMetric] = useState(null);\n\n  if (!data || data.length === 0) return <div>No data available</div>;\n\n  const metrics = Object.keys(data[0]).filter(key => key !== 'well');\n\n  const handleMetricChange = (event) => {\n    setMetric(event.target.value);\n  };\n\n  const wellData = data.reduce((acc, row) => {\n    acc[row.well] = row;\n    return acc;\n  }, {});\n\n  const getHeatMapData = () => {\n    const rows = 32;\n    const cols = 48;\n    let heatmapData = Array.from({ length: rows }, () => Array(cols).fill(0));\n\n    data.forEach((row) => {\n      const [rowIdx, colIdx] = row.well.split(':').map(Number);\n      heatmapData[rowIdx - 1][colIdx - 1] = metric ? parseFloat(row[metric]) : 0;\n    });\n\n    return heatmapData;\n  };\n\n  const getColor = (value) => {\n    if (value > 75) return 'red';\n    if (value > 50) return 'orange';\n    if (value > 25) return 'yellow';\n    return 'green';\n  };\n\n  const tooltipContent = (x, y) => {\n    const well = `${y + 1}:${x + 1}`;\n    const wellInfo = wellData[well];\n\n    if (!wellInfo) {\n      return `<div>No data available</div>`;\n    }\n\n    return (\n      `<div>\n        <p><strong>Well: </strong>${well}</p>\n        ${metrics.map((m) => `<p><strong>${m}: </strong>${wellInfo[m]}</p>`).join('')}\n      </div>`\n    );\n  };\n\n  return (\n    <div>\n      <h2>Data Visualization</h2>\n      <select onChange={handleMetricChange}>\n        <option value=\"\">Select a metric</option>\n        {metrics.map((m) => (\n          <option key={m} value={m}>\n            {m}\n          </option>\n        ))}\n      </select>\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <HeatMap\n          xLabels={new Array(48).fill('').map((_, i) => `${i + 1}`)}\n          yLabels={new Array(32).fill('').map((_, i) => `${i + 1}`)}\n          data={getHeatMapData()}\n          cellStyle={(background, value, min, max, data, x, y) => ({\n            background: getColor(value),\n            border: '1px solid #ccc',\n            cursor: 'pointer'\n          })}\n          cellRender={(value, x, y) => (\n            <div data-tooltip-id={`tooltip-${x}-${y}`} data-tooltip-html={tooltipContent(x, y)}>\n              {value}\n            </div>\n          )}\n        />\n      </div>\n      {data.map((row, index) => {\n        const [x, y] = row.well.split(':').map(Number);\n        return <Tooltip key={index} id={`tooltip-${x-1}-${y-1}`} />;\n      })}\n    </div>\n  );\n};\n\nexport default Heatmap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}